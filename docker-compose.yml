services:
  # Frontend - NextJS Application
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    ports:
      - "3000:3000"
    volumes:
      - ./frontend:/app
      - /app/node_modules
    environment:
      - NODE_ENV=development
      - NEXT_PUBLIC_API_URL=http://localhost:8000
      - NEXT_PUBLIC_WS_URL=ws://localhost:8000
    depends_on:
      - backend
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend - FastAPI Application
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
    environment:
      - ENVIRONMENT=development
      - DATABASE_URL=postgresql://reactorsync:reactorsync@db:5432/reactorsync
      - COHERE_API_KEY=${COHERE_API_KEY}
      - KAFKA_BOOTSTRAP_SERVERS=streaming:9092
      - REDIS_URL=redis://redis:6379
    depends_on:
      - db
      - streaming
      - redis
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MCP Server - AI Agent Tools
  mcp-server:
    build:
      context: ./mcp-server
      dockerfile: Dockerfile
      target: development
    ports:
      - "5222:5222"
    volumes:
      - ./mcp-server:/app
    environment:
      - ENVIRONMENT=development
      - BACKEND_URL=http://backend:8000
      - SERVER_SECRET=${SERVER_SECRET}
    depends_on:
      - backend
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5222/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Database - PostgreSQL with pgvector
  db:
    image: pgvector/pgvector:pg16
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=reactorsync
      - POSTGRES_USER=reactorsync
      - POSTGRES_PASSWORD=reactorsync
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./db/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U reactorsync -d reactorsync"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Streaming - Kafka for real-time data
  streaming:
    image: bitnami/kafka:latest
    ports:
      - "9092:9092"
    environment:
      - KAFKA_CFG_NODE_ID=0
      - KAFKA_CFG_PROCESS_ROLES=controller,broker
      - KAFKA_CFG_LISTENERS=PLAINTEXT://:9092,CONTROLLER://:9093
      - KAFKA_CFG_LISTENER_SECURITY_PROTOCOL_MAP=CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      - KAFKA_CFG_CONTROLLER_QUORUM_VOTERS=0@streaming:9093
      - KAFKA_CFG_CONTROLLER_LISTENER_NAMES=CONTROLLER
      - ALLOW_PLAINTEXT_LISTENER=yes
    volumes:
      - kafka_data:/bitnami/kafka
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Data Generator - Synthetic telemetry generation
  data-generator:
    build:
      context: ./data-generator
      dockerfile: Dockerfile
    environment:
      - KAFKA_BOOTSTRAP_SERVERS=streaming:9092
      - DATABASE_URL=postgresql://reactorsync:reactorsync@db:5432/reactorsync
    depends_on:
      - streaming
      - db
    volumes:
      - ./data-generator:/app
    networks:
      - reactorsync-network
    restart: unless-stopped

  # Redis - Caching and session storage
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - reactorsync-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

volumes:
  postgres_data:
    driver: local
  kafka_data:
    driver: local
  redis_data:
    driver: local

networks:
  reactorsync-network:
    driver: bridge
